# Torchlight GraphQL Schema
# A comprehensive sports coaching platform with AI-powered training insights
# This schema defines all entities, queries, mutations, and subscriptions for the platform

# Custom scalar types for date/time handling and flexible JSON data
scalar DateTime
scalar JSON

"""
Coach entity representing the authenticated user/coach who owns athletes and training data.
Abstracts the traditional user model and stores core profile and account information.
The user_id field references the Supabase auth user UUID.
"""
type Coach {
	id: ID!
	userId: ID! # Supabase auth user UUID
	email: String!
	firstName: String
	lastName: String
	displayName: String # Computed or custom display name
	avatar: String # Profile picture URL
	timezone: String # Coach's timezone for scheduling
	role: CoachRole! # Coach role determining UI mode and athlete limits

	# Account management
	onboardingCompleted: Boolean! # Whether initial setup is done
	lastLoginAt: DateTime # Last successful login
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime # Soft delete timestamp

	# Relationships
	billing: CoachBilling # Billing and subscription information
	athletes: [Athlete!]! # Athletes owned by this coach
	trainingPlans: [TrainingPlan!]! # Training plans created by this coach
}

"""
CoachBilling entity managing subscription, billing, and usage tracking for coaches.
Separated from Coach entity to maintain clean separation of concerns.
Integrated with Stripe for payment processing and subscription management.
"""
type CoachBilling {
	id: ID!
	coach: Coach! # Foreign key to Coach

	# Stripe integration
	stripeCustomerId: String # Stripe customer ID for billing
	subscriptionStatus: SubscriptionStatus! # Current subscription state
	subscriptionTier: SubscriptionTier! # Current plan level
	subscriptionStartDate: DateTime # When current subscription started
	subscriptionEndDate: DateTime # When current subscription ends/renews
	trialEndDate: DateTime # Free trial end date
	billingEmail: String # Billing email if different from main email

	# Usage tracking and limits
	monthlyAthleteLimit: Int! # Max athletes allowed per month
	currentAthleteCount: Int! # Current number of active athletes
	monthlySessionLogLimit: Int! # Max session logs allowed per month
	currentSessionLogCount: Int! # Current session logs this month
	aiCreditsRemaining: Int # AI feature usage credits
	usageResetDate: DateTime! # When usage counters were last reset

	# Billing history and metadata
	lastPaymentDate: DateTime # Last successful payment
	nextBillingDate: DateTime # Next billing cycle date
	billingCycleDay: Int # Day of month for billing (1-28)
	currency: String! # Currency code (USD, EUR, etc.)

	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime # Soft delete timestamp
}

"""
Subscription status indicating the current state of the coach's billing subscription.
"""
enum SubscriptionStatus {
	TRIAL # Free trial period
	ACTIVE # Paid subscription is active and current
	PAST_DUE # Payment failed, grace period
	CANCELED # Subscription cancelled, access until period end
	UNPAID # Payment failed, access suspended
	INCOMPLETE # Subscription setup incomplete
	INCOMPLETE_EXPIRED # Incomplete subscription expired
	PAUSED # Subscription temporarily paused
}

"""
Subscription tier indicating the coach's current plan level and feature access.
"""
enum SubscriptionTier {
	FREE # Free tier with basic features
	STARTER # Basic paid plan
	PROFESSIONAL # Professional plan with advanced features
}

"""
Coach role type determining UI mode and athlete limits.
"""
enum CoachRole {
	PROFESSIONAL # Professional coach - unlimited athletes, full features
	PERSONAL # Personal coach (parent) - up to 3 athletes, simplified UI
	SELF # Self-coached athlete - 1 athlete (themselves), personal dashboard
}

"""
Athlete gender options for training considerations.
"""
enum AthleteGender {
	MALE # Male athlete
	FEMALE # Female athlete
	NON_BINARY # Non-binary athlete
	PREFER_NOT_TO_SAY # Prefer not to specify
}

"""
Fitness level assessment for training planning.
"""
enum FitnessLevel {
	BEGINNER # New to training or sport
	INTERMEDIATE # Some experience and fitness base
	ADVANCED # High level of fitness and experience
	ELITE # Professional or elite level athlete
}

"""
Account status indicating the overall state of the coach's account.
"""
enum AccountStatus {
	ACTIVE # Account is active and in good standing
	SUSPENDED # Account temporarily suspended
	BANNED # Account permanently banned
	PENDING_VERIFICATION # Account awaiting email/identity verification
	INCOMPLETE # Account setup not finished
}

"""
AI Assistant entity representing coaching specialists for different sports and roles.
Assistants provide AI-powered insights and generate training content based on their expertise.
"""
type Assistant {
	id: ID!
	name: String!
	sport: String! # The sport this assistant specializes in
	role: String! # The specific role/focus area (e.g., "Strength Coach", "Technical Coach")
	strengths: [String!]! # Key areas of expertise
	bio: String! # Assistant's background and experience description
	promptTemplate: String! # AI prompt template used for generating content
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime # Soft delete timestamp
}

"""
Athlete entity representing individuals receiving coaching.
Contains personal information, physical attributes, and relationships to goals, sessions, and training plans.
All athlete data is automatically scoped to the authenticated coach's user account.
"""
type Athlete {
	id: ID!
	firstName: String!
	lastName: String!
	email: String
	phone: String # Phone number for contact
	birthday: DateTime # Date of birth for age calculations and program planning
	age: Int # Calculated age in years based on birthday
	gender: AthleteGender # Gender information for training considerations

	# Emergency Contact Information
	emergencyContactName: String # Emergency contact person name
	emergencyContactPhone: String # Emergency contact phone number

	# Physical Information
	height: Float # Height in centimeters
	weight: Float # Weight in kilograms

	# Training Information
	sport: String! # Primary sport focus
	fitnessLevel: FitnessLevel # Current fitness assessment
	trainingHistory: String # Previous training background and experience
	goalsSummary: String # Summary of athlete's goals
	preferredTrainingTime: String # Preferred time for training sessions
	availability: JSON # Weekly availability schedule

	# Medical Information
	medicalConditions: String # Known medical conditions
	injuries: String # Current or past injuries


	# Timestamps
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime # Soft delete timestamp

	# Relationships
	coach: Coach! # The coach responsible for this athlete
	goals: [Goal!] # Associated training goals
	sessionLogs: [SessionLog!] # Training session records
	trainingPlans: [TrainingPlan!]! # Structured training programs
}

"""
Goal entity representing specific training objectives for athletes.
Goals can be linked to multiple session logs and training plans for comprehensive tracking.
"""
type Goal {
	id: ID!
	athlete: Athlete! # The athlete this goal belongs to
	title: String! # Short, descriptive goal title
	description: String # Detailed goal description and context
	category: GoalCategory! # Goal category (strength, endurance, etc.)
	priority: GoalPriority! # Goal priority level

	# Progress Tracking
	targetValue: Float # Target value to achieve
	currentValue: Float # Current progress value
	unit: String # Unit of measurement (kg, seconds, reps, etc.)
	progressPercentage: Float # Calculated progress percentage

	# Status and Timeline
	status: GoalStatus! # Current goal status
	dueDate: DateTime # Target completion date
	completedAt: DateTime # When the goal was completed

	# Notes and Metadata
	progressNotes: String # Coach notes on progress toward the goal
	evaluationResponse: JSON # AI evaluation response data

	# Timestamps
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime # Soft delete timestamp

	# Relationships
	sessionLogs: [SessionLog!]! # Sessions that worked toward this goal
	trainingPlans: [TrainingPlan!] # Training plans that include this goal
}

"""
Goal lifecycle status indicating current state and progress.
"""
enum GoalStatus {
	ACTIVE # Goal is currently being worked on
	COMPLETED # Goal has been successfully achieved
	PAUSED # Goal is temporarily on hold
}

"""
Goal category classification for training focus areas.
"""
enum GoalCategory {
	STRENGTH # Strength and power development
	ENDURANCE # Cardiovascular and muscular endurance
	SKILL # Technical skill development
	MENTAL # Mental performance and psychology
	FLEXIBILITY # Flexibility and mobility
	SPEED # Speed and agility training
	TECHNIQUE # Sport-specific technique improvement
	NUTRITION # Nutrition and dietary goals
	RECOVERY # Recovery and injury prevention
}

"""
Goal priority level for planning and focus.
"""
enum GoalPriority {
	LOW # Low priority goal
	MEDIUM # Medium priority goal
	HIGH # High priority goal
	CRITICAL # Critical priority goal
}

"""
SessionLog entity representing individual training session records.
Captures session details, progress notes, and AI-generated insights.
Note: Called "SessionLog" instead of "Session" to avoid confusion with authentication sessions.
"""
type SessionLog {
	id: ID!
	athlete: Athlete! # The athlete this session belongs to

	# Session Information
	sessionType: SessionType! # Type of session (training, assessment, etc.)
	date: DateTime! # When the session took place
	durationMinutes: Int # Duration of the session in minutes
	location: String # Where the session took place

	# Session Content
	notes: String # Coach's notes about the session
	transcript: String # Raw session transcript or detailed notes
	summary: String # AI-generated summary of the session
	actionItems: [String!] # AI-generated action items and next steps

	# Session Metrics
	intensityLevel: SessionIntensity # Intensity level of the session
	coachRating: Int # Coach's rating of the session (1-5)
	athleteFeedback: String # Athlete's feedback about the session
	weatherConditions: String # Weather conditions during session

	# Equipment and Resources
	equipmentUsed: [String!] # Equipment used during the session
	exercisesPerformed: JSON # Structured data about exercises performed

	# AI Metadata
	aiMetadata: AIMetadata # Metadata about AI processing status

	# Timestamps
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime # Soft delete timestamp

	# Relationships
	goals: [Goal!]! # Goals that were worked on during this session
}

"""
Session type classification for different kinds of training sessions.
"""
enum SessionType {
	TRAINING # Regular training session
	ASSESSMENT # Assessment or testing session
	CONSULTATION # Consultation or planning session
	COMPETITION # Competition or game
	RECOVERY # Recovery or rehabilitation session
	PLANNING # Planning or strategy session
}

"""
Session intensity level for tracking training load.
"""
enum SessionIntensity {
	VERY_LOW # Very low intensity
	LOW # Low intensity
	MODERATE # Moderate intensity
	HIGH # High intensity
	VERY_HIGH # Very high intensity
}

"""
Metadata tracking AI processing status for session logs.
Used to track which AI features have been applied to avoid duplicate processing.
"""
type AIMetadata {
	summaryGenerated: Boolean! # Whether AI summary has been generated
	nextStepsGenerated: Boolean! # Whether AI action items have been generated
}

"""
TrainingPlan entity representing structured, AI-generated training programs for athletes.
Plans are created by AI assistants based on specific goals and can include detailed schedules,
exercises, and progression tracking. Plans support real-time generation status updates.
"""
type TrainingPlan {
	id: ID!
	athlete: Athlete! # Athlete relationship

	# Plan Information
	overview: String # High-level plan description and objectives
	difficulty: TrainingPlanDifficulty! # Plan difficulty level

	# Timeline
	startDate: DateTime # When the training plan should begin
	endDate: DateTime # When the training plan should conclude
	durationWeeks: Int # Calculated duration in weeks

	# Status and Progress
	status: TrainingPlanStatus! # Current plan status
	completionPercentage: Float # Progress completion percentage

	# Content
	planJson: JSON # Structured plan data (exercises, schedules, etc.)
	notes: String # Coach notes about the plan

	# AI Generation Metadata
	sourcePrompt: String # Original prompt used to generate the plan
	generatedBy: String # ID of the Assistant that generated the plan content
	generationMetadata: JSON # Additional AI generation metadata

	# Timestamps
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime # Soft delete timestamp

	# Relationships
	goals: [Goal!] # Multiple goals this plan addresses
	assistants: [Assistant!] # AI assistants that contributed to plan generation
}

"""
Training plan lifecycle status indicating generation progress and readiness.
Used for real-time updates during AI generation process.
"""
enum TrainingPlanStatus {
	DRAFT # Plan created but content not yet generated
	GENERATING # AI is currently generating plan content
	GENERATED # Plan generation completed successfully
	ERROR # Plan generation failed or encountered errors
}

"""
Training plan difficulty level for appropriate challenge setting.
"""
enum TrainingPlanDifficulty {
	BEGINNER # Beginner level training plan
	INTERMEDIATE # Intermediate level training plan
	ADVANCED # Advanced level training plan
	ELITE # Elite level training plan
}

# Input types for filtering and searching

"""
Filter criteria for finding assistants based on sport, role, and expertise.
"""
input AssistantsFilter {
	sport: String! # Required sport filter
	role: String # Optional specific role filter
	strengths: [String] # Optional strengths/expertise filter
}

"""
Input wrapper for assistant queries with optional filtering.
"""
input AssistantsInput {
	filter: AssistantsFilter # Optional filter criteria
}

# Query operations for data retrieval

"""
Root query type providing read access to all platform entities.
All queries are automatically scoped to the authenticated coach's data.
"""
type Query {
	# Coach queries
	me: Coach # Get current authenticated coach profile
	coach(id: ID!): Coach # Get specific coach by ID (admin only)

	# Assistant queries
	assistants(input: AssistantsInput): [Assistant]! # Get assistants with optional filtering

	# Athlete queries
	athletes: [Athlete!]! # Get all athletes for the authenticated coach
	athlete(id: ID!): Athlete # Get specific athlete by ID

	# Goal queries
	goals(athleteId: ID): [Goal!]! # Get all goals for a specific athlete, or all goals if athleteId is omitted
	goal(id: ID!): Goal # Get specific goal by ID

	# Session log queries
	sessionLogs(athleteId: ID): [SessionLog!]! # Get all session logs for an athlete, or all session logs if athleteId is omitted
	sessionLog(id: ID!): SessionLog # Get specific session log by ID

	# Training plan queries
	trainingPlan(id: ID!): TrainingPlan # Get specific training plan by ID
	trainingPlans(athleteId: ID): [TrainingPlan!]! # Get training plans, optionally filtered by athlete
}

# Input types for entity creation and updates

"""
Input for creating a new coach profile during onboarding.
Called automatically after successful authentication.
"""
input CreateCoachInput {
	firstName: String
	lastName: String
	displayName: String
	timezone: String
	role: CoachRole! # Required during coach creation
	billingEmail: String
}

"""
Input for updating coach profile information.
All fields are optional - only provided fields will be updated.
"""
input UpdateCoachInput {
	firstName: String
	lastName: String
	displayName: String
	avatar: String
	timezone: String
	role: CoachRole
	onboardingCompleted: Boolean
}

"""
Input for updating coach billing information.
Typically called by Stripe webhooks or billing management system.
"""
input UpdateCoachBillingInput {
	stripeCustomerId: String
	subscriptionStatus: SubscriptionStatus
	subscriptionTier: SubscriptionTier
	subscriptionStartDate: DateTime
	subscriptionEndDate: DateTime
	trialEndDate: DateTime
	billingEmail: String
	monthlyAthleteLimit: Int
	monthlySessionLogLimit: Int
	aiCreditsRemaining: Int
	lastPaymentDate: DateTime
	nextBillingDate: DateTime
	billingCycleDay: Int
	currency: String
}

"""
Input for creating a new athlete record.
All fields are validated and the athlete is automatically associated with the authenticated coach.
"""
input CreateAthleteInput {
	firstName: String!
	lastName: String!
	email: String # Optional for communication
	phone: String # Phone number for contact
	birthday: DateTime! # Required for age-appropriate training planning
	gender: AthleteGender # Gender information for training considerations

	# Emergency Contact Information
	emergencyContactName: String # Emergency contact person name
	emergencyContactPhone: String # Emergency contact phone number

	# Physical Information
	height: Float # Height in centimeters
	weight: Float # Weight in kilograms

	# Training Information
	sport: String! # Required primary sport focus
	fitnessLevel: FitnessLevel # Current fitness assessment
	trainingHistory: String # Previous training background and experience
	goalsSummary: String # Summary of athlete's goals
	preferredTrainingTime: String # Preferred time for training sessions
	availability: JSON # Weekly availability schedule

	# Medical Information
	medicalConditions: String # Known medical conditions
	injuries: String # Current or past injuries

}

"""
Input for updating an existing athlete record.
All fields are optional - only provided fields will be updated.
"""
input UpdateAthleteInput {
	firstName: String
	lastName: String
	email: String
	phone: String
	birthday: DateTime
	gender: AthleteGender

	# Emergency Contact Information
	emergencyContactName: String
	emergencyContactPhone: String

	# Physical Information
	height: Float
	weight: Float

	# Training Information
	sport: String
	fitnessLevel: FitnessLevel
	trainingHistory: String
	goalsSummary: String
	preferredTrainingTime: String
	availability: JSON

	# Medical Information
	medicalConditions: String
	injuries: String

}

"""
Input for creating a new goal for an athlete.
Goals are automatically associated with the specified athlete and authenticated coach.
"""
input CreateGoalInput {
	athleteId: ID! # The athlete this goal belongs to
	title: String! # Required descriptive title
	description: String # Optional detailed description
	category: GoalCategory! # Required goal category
	priority: GoalPriority! # Required goal priority

	# Progress Tracking
	targetValue: Float # Target value to achieve
	currentValue: Float # Current progress value
	unit: String # Unit of measurement (kg, seconds, reps, etc.)

	# Timeline
	dueDate: DateTime # Optional target completion date

	# Notes
	progressNotes: String # Initial progress notes
}

"""
Input for updating an existing goal.
All fields are optional - only provided fields will be updated.
"""
input UpdateGoalInput {
	title: String
	description: String
	category: GoalCategory
	priority: GoalPriority

	# Progress Tracking
	targetValue: Float
	currentValue: Float
	unit: String

	# Status and Timeline
	status: GoalStatus # Update goal progress status
	dueDate: DateTime
	completedAt: DateTime

	# Notes
	progressNotes: String # Coach notes on progress

	# Relationships
	trainingPlanIds: [ID!] # Associate goal with training plans
}

"""
Input for creating a new session log entry.
Session logs capture training session details and progress toward goals.
"""
input CreateSessionLogInput {
	athleteId: ID! # The athlete this session belongs to

	# Session Information
	sessionType: SessionType! # Type of session (training, assessment, etc.)
	date: DateTime! # Required session date
	durationMinutes: Int # Duration of the session in minutes
	location: String # Where the session took place

	# Session Content
	notes: String # Optional coach notes
	transcript: String # Optional detailed session transcript

	# Session Metrics
	intensityLevel: SessionIntensity # Intensity level of the session
	coachRating: Int # Coach's rating of the session (1-5)
	athleteFeedback: String # Athlete's feedback about the session
	weatherConditions: String # Weather conditions during session

	# Equipment and Resources
	equipmentUsed: [String!] # Equipment used during the session
	exercisesPerformed: JSON # Structured data about exercises performed

	# Relationships
	goalIds: [ID!] # Optional goals addressed in this session
}

"""
Input for updating an existing session log.
Supports both manual updates and AI-generated content addition.
"""
input UpdateSessionLogInput {
	# Session Information
	sessionType: SessionType
	date: DateTime
	durationMinutes: Int
	location: String

	# Session Content
	notes: String # Coach notes
	transcript: String # Session transcript
	summary: String # AI-generated or manual summary
	actionItems: [String!] # AI-generated or manual action items

	# Session Metrics
	intensityLevel: SessionIntensity
	coachRating: Int
	athleteFeedback: String
	weatherConditions: String

	# Equipment and Resources
	equipmentUsed: [String!]
	exercisesPerformed: JSON

	# Relationships
	goalIds: [ID!] # Goals addressed in session (replaces existing)
}

# AI-powered input types for intelligent features

"""
Input for triggering AI summarization of a session log.
Generates summary and action items using AI analysis of session content.
"""
input AISummarizeSessionLogInput {
	sessionLogId: ID! # The session log to summarize
}

"""
Input for creating a new training plan.
Plan content will be generated by AI based on specified goals and assistant expertise.
"""
input CreateTrainingPlanInput {
	athleteId: ID! # The athlete this plan is for
	assistantIds: [ID!] # AI assistants to use for plan generation
	goalIds: [ID!] # Goals this plan should address
	overview: String # High-level plan description and objectives
	notes: String # Coach notes about the plan
	startDate: DateTime # When the training plan should begin
	endDate: DateTime # When the training plan should conclude
}

"""
Input for AI training plan generation.
Creates suggested training plan content based on athlete goals and historical data.
"""
input AIGenerateTrainingPlanInput {
	athleteId: ID! # The athlete to generate a session for
	goalIds: [ID!]! # Goals to focus on in the session
}


"""
Input for AI goal extraction and evaluation from natural language.
Processes goal text and provides structured evaluation and recommendations.
"""
input AIExtractAndEvaluateGoalInput {
	athleteId: ID! # The athlete the goal is for
	goalText: String! # Natural language goal description to analyze
}

"""
Input for AI longitudinal pattern analysis across session logs.
Analyzes patterns and trends across multiple session logs to identify insights.
"""
input AIAnalyzeSessionPatternsInput {
	athleteId: ID! # The athlete to analyze
	startDate: DateTime! # Analysis period start date
	endDate: DateTime! # Analysis period end date
	goalIds: [ID!] # Optional filter for specific goals
}

# AI Goal Evaluation Response Types
# These types represent the structured output from AI goal analysis

"""
Comprehensive response from AI goal extraction and evaluation.
Provides detailed analysis, scoring, and recommendations for goal refinement.
"""
type GoalEvaluationResponse {
	coreGoal: CoreGoal! # Extracted core goal information
	goalEvaluation: GoalEvaluation! # Detailed goal scoring and analysis
	refinedGoalSuggestion: RefinedGoalSuggestion! # AI recommendations for improvement
	timeline: Timeline! # Timeline analysis and planning
	motivation: Motivation! # Motivational factors and drivers
	availability: Availability! # Resource and schedule availability
	constraints: Constraints! # Limitations and challenges
	successIndicators: SuccessIndicators! # Success measurement criteria
	extractionConfidence: ExtractionConfidence! # AI confidence in analysis
	coachingFeedback: CoachingFeedback! # Coach-specific insights and recommendations
}

"""
Core goal information extracted from natural language input.
Represents the fundamental objective and sport context.
"""
type CoreGoal {
	type: String! # Goal category (performance, skill development, etc.)
	primaryObjective: String! # Main goal statement
	sport: String! # Sport context
	measurableOutcome: String # Specific measurable target if identified
}

"""
Detailed scoring and evaluation of goal quality across multiple dimensions.
Each score is typically 1-10 scale with 10 being highest quality.
"""
type GoalEvaluation {
	overallQualityScore: Int! # Overall goal quality assessment
	specificityScore: Int! # How specific and clear the goal is
	feasibilityScore: Int! # How achievable the goal appears
	relevanceScore: Int! # How relevant to athlete's sport/context
	timeStructureScore: Int! # How well-defined the timeline is
	motivationScore: Int! # How motivating/engaging the goal appears
	evaluationSummary: EvaluationSummary! # Detailed breakdown of assessment
}

"""
Detailed breakdown of goal evaluation highlighting key areas.
"""
type EvaluationSummary {
	strengths: [String!]! # Positive aspects of the goal
	weaknesses: [String!]! # Areas needing improvement
	riskFactors: [String!]! # Potential challenges or obstacles
	improvementPriorities: [String!]! # Most important areas to address
}

"""
AI-generated suggestions for improving the goal statement.
"""
type RefinedGoalSuggestion {
	improvedGoalStatement: String # Suggested improved goal text
	keyChanges: [String!]! # List of specific changes made
	rationale: String! # Explanation of why changes were suggested
}

"""
Timeline analysis and planning information for the goal.
"""
type Timeline {
	targetDate: String # Suggested or extracted target completion date
	duration: String # Expected time to achieve goal
	urgencyLevel: UrgencyLevel! # How urgent/time-sensitive the goal is
	milestones: [String!]! # Suggested intermediate milestones
}

"""
Urgency classification for goal timeline planning.
"""
enum UrgencyLevel {
	IMMEDIATE # Needs attention within days/weeks
	SHORT_TERM # 1-3 months
	MEDIUM_TERM # 3-12 months
	LONG_TERM # Over 1 year
}

"""
Motivational factors and emotional context driving the goal.
"""
type Motivation {
	whyItMatters: String! # Core reason why this goal is important
	externalDrivers: [String!]! # External factors motivating the goal
	emotionalContext: String! # Emotional significance and personal meaning
	supportSystem: [String!]! # People/resources available for support
}

"""
Resource availability and practical constraints for goal achievement.
"""
type Availability {
	trainingTime: String # Available time for training per week
	scheduleConstraints: [String!]! # Schedule limitations and conflicts
	location: String # Available training locations/facilities
	equipment: [String!]! # Available equipment and resources
	budget: String # Budget considerations for training
}

"""
Limitations and challenges that may impact goal achievement.
"""
type Constraints {
	physicalLimitations: [String!]! # Physical restrictions or injuries
	experienceLevel: ExperienceLevel! # Current skill/experience level
	previousChallenges: [String!]! # Past obstacles and difficulties
	riskFactors: [String!]! # Potential risks or concerns
}

"""
Experience level classification for training planning.
"""
enum ExperienceLevel {
	BEGINNER # New to the sport/activity
	INTERMEDIATE # Some experience and skill development
	ADVANCED # High skill level and experience
	RETURNING # Previously experienced but returning after break
}

"""
Success measurement criteria and expected outcomes.
"""
type SuccessIndicators {
	measurementMethods: [String!]! # How progress/success will be measured
	successDefinition: String! # Clear definition of goal achievement
	secondaryBenefits: [String!]! # Additional benefits beyond main goal
}

"""
AI confidence assessment and information gaps in goal analysis.
"""
type ExtractionConfidence {
	overallConfidence: ConfidenceLevel! # Overall confidence in analysis
	missingInformation: [String!]! # Key information not provided
	assumptions: [String!]! # Assumptions made by AI in analysis
	suggestedQuestions: [String!]! # Questions to clarify unclear aspects
}

"""
Confidence level in AI analysis and recommendations.
"""
enum ConfidenceLevel {
	HIGH # Very confident in analysis
	MEDIUM # Moderately confident
	LOW # Low confidence, more info needed
}

"""
Coach-specific feedback and development insights.
"""
type CoachingFeedback {
	dataQuality: DataQuality! # Quality of information provided
	keyGapsIdentified: [String!]! # Important missing information
	improvementSuggestions: [String!]! # Specific recommendations for coaches
	riskFlags: [String!]! # Warning flags requiring attention
	coachDevelopmentInsight: String! # Insights for coach development
}

"""
Assessment of data quality for coaching analysis.
"""
enum DataQuality {
	EXCELLENT # Comprehensive, detailed information
	GOOD # Sufficient information for analysis
	LIMITED # Some gaps but workable
	INSUFFICIENT # Too little information for proper analysis
}

"""
Input for updating an existing training plan.
All fields are optional - only provided fields will be updated.
"""
input UpdateTrainingPlanInput {
	# Plan Information
	overview: String # Plan overview description
	difficulty: TrainingPlanDifficulty # Plan difficulty level

	# Timeline
	startDate: DateTime # When the training plan should begin
	endDate: DateTime # When the training plan should conclude

	# Status and Progress
	status: TrainingPlanStatus # Update plan status
	completionPercentage: Float # Update progress completion

	# Content
	planJson: JSON # Update structured plan data
	notes: String # Update coach notes

	# Relationships
	assistantIds: [ID!] # Update associated AI assistants
	goalIds: [ID!] # Update associated goals
}

# Mutation operations for data modification

"""
Root mutation type providing write access to all platform entities.
All mutations are automatically scoped to the authenticated coach's data.
Includes both standard CRUD operations and AI-powered features.
"""
type Mutation {
	# Coach mutations
	createCoach(input: CreateCoachInput!): Coach! # Create coach profile (onboarding)
	updateCoach(input: UpdateCoachInput!): Coach! # Update coach profile
	updateCoachBilling(input: UpdateCoachBillingInput!): CoachBilling! # Update billing information (webhooks)

	# Athlete mutations
	createAthlete(input: CreateAthleteInput!): Athlete! # Create new athlete
	updateAthlete(id: ID!, input: UpdateAthleteInput!): Athlete! # Update athlete details
	deleteAthlete(id: ID!): Boolean! # Soft delete athlete (sets deleted_at)

	# Goal mutations
	createGoal(input: CreateGoalInput!): Goal! # Create new goal for athlete
	updateGoal(id: ID!, input: UpdateGoalInput!): Goal! # Update goal details and status
	deleteGoal(id: ID!): Boolean! # Soft delete goal

	# Session log mutations
	createSessionLog(input: CreateSessionLogInput!): SessionLog! # Create new session record
	updateSessionLog(id: ID!, input: UpdateSessionLogInput!): SessionLog! # Update session details
	deleteSessionLog(id: ID!): Boolean! # Soft delete session log

	# Training plan mutations
	createTrainingPlan(input: CreateTrainingPlanInput!): TrainingPlan! # Create new training plan (triggers AI generation)
	updateTrainingPlan(id: ID!, input: UpdateTrainingPlanInput!): TrainingPlan! # Update plan metadata

	# AI-powered mutations
	summarizeSessionLog(input: AISummarizeSessionLogInput!): SessionLog! # Generate AI summary for session
	generateTrainingPlan(input: AIGenerateTrainingPlanInput!): TrainingPlan! # Generate AI training plan
	analyzeSessionPatterns(input: AIAnalyzeSessionPatternsInput!): String! # Analyze patterns across session logs
	extractAndEvaluateGoal(
		input: AIExtractAndEvaluateGoalInput!
	): GoalEvaluationResponse! # AI goal analysis and evaluation
}

# Real-time subscription operations

"""
Root subscription type providing real-time updates for platform entities.
Subscriptions enable live updates in the UI during AI processing and data changes.
All subscriptions are automatically scoped to the authenticated coach's data.
"""
type Subscription {
	# Training plan subscriptions
	trainingPlanGenerated(athleteId: ID!): TrainingPlan! # Real-time updates during AI plan generation

	# Session log subscriptions
	sessionLogAdded(athleteId: ID!): SessionLog! # New session log created for athlete
	sessionLogUpdated(id: ID!): SessionLog! # Session log updated (e.g., AI summary added)

	# Goal subscriptions
	goalAdded(athleteId: ID!): Goal! # New goal created for athlete
	goalUpdated(id: ID!): Goal! # Goal updated (status, progress, etc.)

	# Athlete subscriptions
	athleteUpdated(id: ID!): Athlete! # Athlete information updated
}
